//1.buildscript
buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
        springLoadedVersion = '1.2.5.RELEASE'
        gradleSshVersion = '2.2.0' //아래 gradle-ssh-plugin에서 사용할 버전 명시
//        researchgateVersion = '2.3.5' //아래 gradle-ssh-plugin에서 사용할 버전 명시
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.hidetake:gradle-ssh-plugin:${gradleSshVersion}")//gradle 플러그인 의존성 추가
        classpath("org.springframework:springloaded:${springLoadedVersion}")
//        classpath("net.researchgate:gradle-release:${researchgateVersion}")
    }
}

//2. plugin apply
//플러그인 적용
apply plugin: 'org.hidetake.ssh'
//apply plugin: 'net.researchgate.release'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

// java setting
sourceCompatibility = 1.8
targetCompatibility = 1.8

//3. jar setting
jar {
    baseName = 'provider'
    version =  '0.0.1-SNAPSHOT'
}

//4-0. 여러 task에서 사용할 수 있도록 build file 이름은 전역변수로 지정
project.ext{
    warBaseName = 'provider'
    warVersion = '0.0.1-'+ new Date().format('yyyyMMdd-HHmmss')
}


//4. war setting
war {
    baseName = project.warBaseName
    version = project.warVersion
    exclude("build/**")
//    version = '0.1.0'
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
    }
}

//리파지토리
repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://repo.spring.io/libs-snapshot' }
}



//라이브러리 의존추가
dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('org.apache.tomcat.embed:tomcat-embed-jasper')
    compile('javax.servlet:jstl:1.2')
    compile('commons-io:commons-io:2.5')
    compile('commons-httpclient:commons-httpclient:3.1')
    compile('com.google.code.gson:gson:2.3.1')
//    compile("org.springframework.boot:spring-boot-devtools")
    compile('org.springframework:springloaded:1.2.5.RELEASE') //추가하여 javaagent 옵션 추가시 위치 가져옴 변경
    testCompile("org.springframework.boot:spring-boot-starter-test")

}

//서버빌드를 위한 추가설정
remotes {
    publicServer {
        host = project.properties["publicHost"]
        port = project.properties["publicPort"].toInteger()
        user = project.properties["publicUser"]
        password = project.properties["publicPassword"]
        knownHosts = allowAnyHosts //알 수 없는 호스트라도 접속 가능
    }
}

//test.txt 테스트
//task scp doLast{
//    ssh.run {
//        //remotes.publicServer으로 호스트 세션 시작
//        session(remotes.publicServer) {
//
//            // war 파일명을 로컬변수에 지정
//            final warName = "test/test.txt"
//            println "war 이름 : ${warName}"
//
//            println "public 서버 파일 전송 시작"
//            /*
//                from : 현재 폴더를 기준으로 from path 지정
//                into : 도착서버의 디렉토리 path 지정
//             */
//            put from: "${warName}", into: project.properties["publicDir"]
//            println "public 서버 파일 전송 완료"
//        }
//    }
//}

//war test
task scp doLast{
    ssh.run {
        //remotes.publicServer으로 호스트 세션 시작
        session(remotes.publicServer) {

            // war 파일명을 로컬변수에 지정
            final warName = project.warBaseName + "-" + project.warVersion+".war"
            println "war 이름 : ${warName}"

            println "public 서버 파일 전송 시작"
            /*
                from : 현재 폴더를 기준으로 from path 지정
                into : 도착서버의 디렉토리 path 지정
             */
            put from: "build/libs/${warName}", into: project.properties["publicDir"]
            println "public 서버 파일 전송 완료"
        }
    }
}